#!/usr/bin/env python3
"""
Script principal pour ex√©cuter les tests d'approbation du syst√®me de compte Python.

Ce script :
1. G√©n√®re les fichiers received √† partir du programme Python
2. Lance les tests d'approbation pour comparer avec les fichiers approved
3. Affiche un rapport d√©taill√© des r√©sultats
"""

import os
import sys
import subprocess


def main():
    """Point d'entr√©e principal."""
    print("üöÄ Lancement des tests d'approbation pour le syst√®me de compte Python")
    print("="*70)
    
    # V√©rifier que nous sommes dans le bon r√©pertoire
    project_root = os.path.dirname(os.path.abspath(__file__))
    os.chdir(project_root)
    
    # V√©rifier les d√©pendances
    try:
        import approvaltests
        print("‚úÖ ApprovalTests est install√©")
    except ImportError:
        print("‚ùå ApprovalTests n'est pas install√©")
        print("üí° Installez-le avec: pip install -r requirements.txt")
        return 1
    
    # V√©rifier que le programme Python existe
    python_main = os.path.join("python_accountsystem", "main.py")
    if not os.path.exists(python_main):
        print(f"‚ùå Programme Python introuvable: {python_main}")
        return 1
    
    print(f"‚úÖ Programme Python trouv√©: {python_main}")
    
    # V√©rifier les fichiers d'entr√©e
    input_dir = os.path.join("tests", "inputs")
    if not os.path.exists(input_dir):
        print(f"‚ùå R√©pertoire d'entr√©e introuvable: {input_dir}")
        return 1
    
    input_files = [f for f in os.listdir(input_dir) if f.endswith('.in')]
    print(f"‚úÖ {len(input_files)} fichiers d'entr√©e trouv√©s")
    
    # V√©rifier les fichiers approved
    approved_dir = os.path.join("tests", "approved")
    if not os.path.exists(approved_dir):
        print(f"‚ùå R√©pertoire approved introuvable: {approved_dir}")
        return 1
    
    approved_files = [f for f in os.listdir(approved_dir) if f.endswith('.approved.txt')]
    print(f"‚úÖ {len(approved_files)} fichiers approved trouv√©s")
    
    print("\nüîÑ √âtape 1: G√©n√©ration des fichiers received...")
    try:
        result = subprocess.run([
            sys.executable, 
            os.path.join("tests", "generate_received_files.py")
        ], capture_output=True, text=True)
        
        if result.returncode != 0:
            print(f"‚ùå Erreur lors de la g√©n√©ration des fichiers received:")
            print(result.stderr)
            return 1
        
        print(result.stdout)
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration: {e}")
        return 1
    
    print("\nüß™ √âtape 2: Lancement des tests d'approbation...")
    try:
        result = subprocess.run([
            sys.executable, 
            "-m", "pytest", 
            os.path.join("tests", "test_approval.py"),
            "-v"
        ], capture_output=True, text=True)
        
        print(result.stdout)
        if result.stderr:
            print("Erreurs/Avertissements:")
            print(result.stderr)
        
        if result.returncode == 0:
            print("\nüéâ Tous les tests d'approbation ont r√©ussi!")
            return 0
        else:
            print(f"\n‚ùå Certains tests ont √©chou√© (code de retour: {result.returncode})")
            return result.returncode
            
    except FileNotFoundError:
        print("‚ùå pytest n'est pas install√©. Essayons avec unittest...")
        try:
            result = subprocess.run([
                sys.executable, 
                os.path.join("tests", "test_approval.py")
            ], capture_output=True, text=True)
            
            print(result.stdout)
            if result.stderr:
                print("Erreurs/Avertissements:")
                print(result.stderr)
            
            if result.returncode == 0:
                print("\nüéâ Tous les tests d'approbation ont r√©ussi!")
                return 0
            else:
                print(f"\n‚ùå Certains tests ont √©chou√© (code de retour: {result.returncode})")
                return result.returncode
        except Exception as e:
            print(f"‚ùå Erreur lors du lancement des tests: {e}")
            return 1


if __name__ == "__main__":
    sys.exit(main())
